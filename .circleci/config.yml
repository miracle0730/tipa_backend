version: 2

jobs:
  build:
    machine: true
    environment:
      app: "backend"
      ecr_url_dev: "320691571180.dkr.ecr.us-east-1.amazonaws.com/backend-dev"
      ecr_url_master: "320691571180.dkr.ecr.us-east-1.amazonaws.com/backend-master"
    steps:
      # get source code from repo
      - checkout

      # setup aws cli
      # CircleCI has by default aws cli 1.11 - which doesn't work correctly with creating our backend task definition
      # so we have to update it here
      - run:
          name: Upgrade and setup aws cli
          command: |
            pip install awscli==1.15.58
            aws --version
            aws configure set default.region us-east-1
            aws configure set default.output json
            aws ecr get-login --no-include-email | sh

      # build the application image
      - run:
          name: Build & push docker image
          command: |

            docker build --rm=false --build-arg buildtime_cibuild=$CIRCLE_BUILD_NUM -t $app:$CIRCLE_BRANCH .

            case $CIRCLE_BRANCH in
                  master)
                    docker tag $app:$CIRCLE_BRANCH $ecr_url_master:$CIRCLE_BRANCH.$CIRCLE_BUILD_NUM
                    docker push $ecr_url_master:$CIRCLE_BRANCH.$CIRCLE_BUILD_NUM
                  ;;
                  dev)
                    docker tag $app:$CIRCLE_BRANCH $ecr_url_dev:$CIRCLE_BRANCH.$CIRCLE_BUILD_NUM
                    docker push $ecr_url_dev:$CIRCLE_BRANCH.$CIRCLE_BUILD_NUM
                  ;;
            esac

      - run:
          name: Render task definition & update Fargate service
          command: |

            replaces="s|{.ENV}|$CIRCLE_BRANCH|;";
            replaces="$replaces s|{.CI_BUILD}|$CIRCLE_BUILD_NUM|; ";
            replaces="$replaces s|{.CI_COMMIT}|$CIRCLE_SHA1|; ";
            replaces="$replaces s|{.CI_USER}|$CIRCLE_USERNAME|; ";

            case $CIRCLE_BRANCH in
                master)

                    CLUSTER=backend-cluster-master
                    FAMILY=backend-master
                    # how many backend replicas to run, set at least 2 to have better availability
                    DESIRED_COUNT=1

                    # is used once, just to create a Fargate service
                    TARGET_GROUP_ARN=arn:aws:elasticloadbalancing:us-east-1:320691571180:targetgroup/backend-target-group-master/5aa075dbf6a246f7
                    SUBNETS=subnet-0dee16440f7e7869b,subnet-0b2ecc7de9ce0c86f,subnet-0ab10ae569609e24b
                    SECURITY_GROUPS=sg-004e62e16503485d5

                    # is used for access to AWS S3
                    replaces="$replaces s|{.AWS_REGION}|$AWS_DEFAULT_REGION|; ";
                    replaces="$replaces s|{.AWS_KEY_ID}|$AWS_ACCESS_KEY_ID_MASTER|; ";
                    replaces="$replaces s|{.AWS_SECRET_KEY}|$AWS_SECRET_ACCESS_KEY_MASTER|; ";

                    replaces="$replaces s|{.ECR_URL}|$ecr_url_master|; ";
                    replaces="$replaces s|{.ECSROLE}|arn:aws:iam::320691571180:role/EcsTaskExecutionRole_master|; ";
                    replaces="$replaces s|{.CPU}|512|; ";
                    replaces="$replaces s|{.MEMORY}|1024|; ";

                    replaces="$replaces s|{.DATABASE_URL}|$DATABASE_URL_MASTER|; ";
                    replaces="$replaces s|{.NODE_ENV}|production|; ";
                    replaces="$replaces s|{.MEDIA_BUCKET}|tipa-master-media|; ";
                    replaces="$replaces s|{.JWT_SECRET}|$JWT_SECRET_MASTER|; ";
                    replaces="$replaces s|{.JWT_EXPIRES_IN}|1d|; ";
                    replaces="$replaces s|{.LOG_LEVEL}|info|; ";
                    replaces="$replaces s|{.JWT_ACTIVATE_SECRET}|$JWT_ACTIVATE_SECRET_MASTER|; ";
                    replaces="$replaces s|{.JWT_RESET_PASSWORD_SECRET}|$JWT_RESET_PASSWORD_SECRET_MASTER|; ";
                    replaces="$replaces s|{.JWT_ACTIVATE_EXPIRES_IN}|1h|; ";
                    replaces="$replaces s|{.JWT_RESET_PASSWORD_EXPIRES_IN}|30m|; ";
                    replaces="$replaces s|{.TIPA_CORP_EMAIL_DOMAIN}|$TIPA_CORP_EMAIL_DOMAIN_MASTER|; ";
                    replaces="$replaces s|{.FRONTEND_HOST}|$FRONTEND_HOST_MASTER|; ";
                    replaces="$replaces s|{.MAILGUN_PRIVATE_API_KEY}|$MAILGUN_PRIVATE_API_KEY_MASTER|; ";
                    replaces="$replaces s|{.MAILGUN_DOMAIN}|$MAILGUN_DOMAIN_MASTER|; ";
                    replaces="$replaces s|{.MAILGUN_HOST}|$MAILGUN_HOST_MASTER|; ";
                    replaces="$replaces s|{.MAILGUN_MAIL}|$MAILGUN_MAIL_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_CLIENT_ID}|$ZOHO_CLIENT_ID_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_CLIENT_SECRET}|$ZOHO_CLIENT_SECRET_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_USER_IDENTIFIER}|$ZOHO_USER_IDENTIFIER_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_ACCESS_TOKEN}|$ZOHO_ACCESS_TOKEN_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_REFRESH_TOKEN}|$ZOHO_REFRESH_TOKEN_MASTER|; ";
                    replaces="$replaces s|{.ZOHO_API_KEY}|$ZOHO_API_KEY_MASTER|; ";
                    replaces="$replaces s|{.MS_OFFICE_APP_ID}|$MS_OFFICE_APP_ID_MASTER|; ";
                    replaces="$replaces s|{.MS_OFFICE_APP_SECRET}|$MS_OFFICE_APP_SECRET_MASTER|; ";
                    replaces="$replaces s|{.MS_OFFICE_GRAPH_SCOPE_URL}|$MS_OFFICE_GRAPH_SCOPE_URL|; ";
                    replaces="$replaces s|{.MS_OFFICE_TENANT_ID}|$MS_OFFICE_TENANT_ID_MASTER|; ";
                    replaces="$replaces s|{.MS_OFFICE_USER_ID}|$MS_OFFICE_USER_ID_MASTER|; ";

                    ;;
                dev)

                    CLUSTER=backend-cluster-dev
                    FAMILY=backend-dev
                    DESIRED_COUNT=1

                    # is used once, just to create a Fargate service
                    TARGET_GROUP_ARN=arn:aws:elasticloadbalancing:us-east-1:320691571180:targetgroup/backend-target-group-dev/16d0f04719ad1b6c
                    SUBNETS=subnet-0caac3aa754457460,subnet-00cb87e6c9168760c,subnet-0138a2554225a314b
                    SECURITY_GROUPS=sg-0b7ae814e44f78703

                    # is used for access to AWS S3
                    replaces="$replaces s|{.AWS_REGION}|$AWS_DEFAULT_REGION|; ";
                    replaces="$replaces s|{.AWS_KEY_ID}|$AWS_ACCESS_KEY_ID_DEV|; ";
                    replaces="$replaces s|{.AWS_SECRET_KEY}|$AWS_SECRET_ACCESS_KEY_DEV|; ";

                    replaces="$replaces s|{.ECR_URL}|$ecr_url_dev|; ";
                    replaces="$replaces s|{.ECSROLE}|arn:aws:iam::320691571180:role/EcsTaskExecutionRole_dev|; ";
                    replaces="$replaces s|{.CPU}|512|; ";
                    replaces="$replaces s|{.MEMORY}|1024|; ";

                    replaces="$replaces s|{.DATABASE_URL}|$DATABASE_URL_DEV|; ";
                    replaces="$replaces s|{.NODE_ENV}|development|; ";
                    replaces="$replaces s|{.MEDIA_BUCKET}|tipa-dev-media|; ";
                    replaces="$replaces s|{.JWT_SECRET}|$JWT_SECRET_DEV|; ";
                    replaces="$replaces s|{.JWT_EXPIRES_IN}|1d|; ";
                    replaces="$replaces s|{.LOG_LEVEL}|silly|; ";
                    replaces="$replaces s|{.JWT_ACTIVATE_SECRET}|$JWT_ACTIVATE_SECRET_DEV|; ";
                    replaces="$replaces s|{.JWT_RESET_PASSWORD_SECRET}|$JWT_RESET_PASSWORD_SECRET_DEV|; ";
                    replaces="$replaces s|{.JWT_ACTIVATE_EXPIRES_IN}|1h|; ";
                    replaces="$replaces s|{.JWT_RESET_PASSWORD_EXPIRES_IN}|30m|; ";
                    replaces="$replaces s|{.TIPA_CORP_EMAIL_DOMAIN}|$TIPA_CORP_EMAIL_DOMAIN_DEV|; ";
                    replaces="$replaces s|{.FRONTEND_HOST}|$FRONTEND_HOST_DEV|; ";
                    replaces="$replaces s|{.MAILGUN_PRIVATE_API_KEY}|$MAILGUN_PRIVATE_API_KEY_DEV|; ";
                    replaces="$replaces s|{.MAILGUN_DOMAIN}|$MAILGUN_DOMAIN_DEV|; ";
                    replaces="$replaces s|{.MAILGUN_HOST}|$MAILGUN_HOST_DEV|; ";
                    replaces="$replaces s|{.MAILGUN_MAIL}|$MAILGUN_MAIL_DEV|; ";
                    replaces="$replaces s|{.ZOHO_CLIENT_ID}|$ZOHO_CLIENT_ID_DEV|; ";
                    replaces="$replaces s|{.ZOHO_CLIENT_SECRET}|$ZOHO_CLIENT_SECRET_DEV|; ";
                    replaces="$replaces s|{.ZOHO_USER_IDENTIFIER}|$ZOHO_USER_IDENTIFIER_DEV|; ";
                    replaces="$replaces s|{.ZOHO_ACCESS_TOKEN}|$ZOHO_ACCESS_TOKEN_DEV|; ";
                    replaces="$replaces s|{.ZOHO_REFRESH_TOKEN}|$ZOHO_REFRESH_TOKEN_DEV|; ";
                    replaces="$replaces s|{.ZOHO_API_KEY}|$ZOHO_API_KEY_DEV|; ";
                    replaces="$replaces s|{.MS_OFFICE_APP_ID}|$MS_OFFICE_APP_ID_DEV|; ";
                    replaces="$replaces s|{.MS_OFFICE_APP_SECRET}|$MS_OFFICE_APP_SECRET_DEV|; ";
                    replaces="$replaces s|{.MS_OFFICE_GRAPH_SCOPE_URL}|$MS_OFFICE_GRAPH_SCOPE_URL|; ";
                    replaces="$replaces s|{.MS_OFFICE_TENANT_ID}|$MS_OFFICE_TENANT_ID_DEV|; ";
                    replaces="$replaces s|{.MS_OFFICE_USER_ID}|$MS_OFFICE_USER_ID_DEV|; ";

                    ;;
                *)
                    echo branch is not configured
                    ;;
            esac

            cat .circleci/backend-task-definition-template.json | sed -e "$replaces" > backend-task-definition.json

            cat backend-task-definition.json

            SERVICE=backend
            CONTAINER_PORT=3000
            CONTAINER_NAME=backend

            # more bash-friendly output for jq
            export JQ="jq --raw-output --exit-status"

            # create new version of app task definition
            if revision=$(aws ecs register-task-definition --family $FAMILY --cli-input-json file://backend-task-definition.json --region $AWS_DEFAULT_REGION | $JQ '.taskDefinition.taskDefinitionArn'); then
                echo "Revision: $revision"
            else
                echo "Failed to register task definition"
                return 1
            fi

            # remove rendered task definition
            rm -rf ./backend-task-definition.json

            #check if service is created
            if [[ $(aws ecs describe-services --cluster $CLUSTER --services $SERVICE | $JQ ".services | length") == 0 ]]; then
                echo "create service"

                aws ecs create-service \
                --cluster $CLUSTER \
                --service-name $SERVICE \
                --task-definition $revision \
                --desired-count $DESIRED_COUNT \
                --launch-type "FARGATE" \
                --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp='ENABLED'}" \
                --load-balancers targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT \
                --region $AWS_DEFAULT_REGION
            else
                echo "update service"

                aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $revision --desired-count $DESIRED_COUNT --region $AWS_DEFAULT_REGION
            fi

            # # wait for older revisions to disappear
            # for attempt in {1..20}; do
            #     if stale=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE | \
            #                   $JQ ".services[0].deployments | .[] | select(.taskDefinition != \"$revision\") | .taskDefinition"); then
            #         echo "Waiting for stale deployments:"
            #         echo "$stale"
            #         sleep 45
            #     else
            #         echo "Deployed!"
            #         exit 0
            #     fi
            # done
            # echo "Service update took too long."
            # exit 1

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - dev
                - master
